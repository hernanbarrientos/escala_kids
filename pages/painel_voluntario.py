import streamlit as st
import database as db
import utils

st.set_page_config(page_title="Portal do Volunt√°rio", layout="wide")

# --- VERIFICA√á√ÉO DE LOGIN (AUTH GUARD) ---
if not st.session_state.get('logged_in') or st.session_state.user_role != 'voluntario':
    st.error("Voc√™ precisa estar logado como volunt√°rio para acessar esta p√°gina.")
    if st.button("Ir para Login"):
        st.switch_page("app.py")
    st.stop()

# --- CONTE√öDO DA P√ÅGINA ---
conn = db.conectar_db()
voluntario = st.session_state.voluntario_info

nome_voluntario = voluntario.get("nome", "Volunt√°rio")

st.title(f"Portal de {nome_voluntario}")
st.markdown("---")

st.subheader("üóìÔ∏è Informar Indisponibilidade para a Pr√≥xima Escala")

opcoes_agrupadas, mes_ref = utils.get_dias_culto_proximo_mes()
st.info(f"Aten√ß√£o: A indisponibilidade informada ser√° para a escala de **{mes_ref}**.")

# --- CARREGAR INFORMA√á√ïES ANTERIORES ---
indisponibilidade_anterior = db.carregar_indisponibilidade(conn, voluntario.get("id"), mes_ref)
datas_restricao_salvas = []
serviu_ceia_salvo = "N√£o" # Padr√£o
if indisponibilidade_anterior:
    # Separa as datas em uma lista
    datas_restricao_salvas = [d.strip() for d in indisponibilidade_anterior['datas_restricao'].split(',') if d.strip()]
    serviu_ceia_salvo = indisponibilidade_anterior['serviu_ceia']

# --- VERIFICAR STATUS DE EDI√á√ÉO ---
edicao_liberada = db.get_edicao_liberada(conn, mes_ref)

if not edicao_liberada:
    st.warning(f"As edi√ß√µes para a escala de **{mes_ref}** est√£o bloqueadas no momento. Voc√™ pode visualizar suas op√ß√µes enviadas, mas n√£o poder√° alter√°-las.")
else:
    st.success(f"As edi√ß√µes para a escala de **{mes_ref}** est√£o liberadas. Voc√™ pode alterar suas op√ß√µes.")


st.write("Selecione os dias e hor√°rios que voc√™ **N√ÉO** poder√° servir:")

cols_to_display = sorted(opcoes_agrupadas.keys(), key=lambda x: ("Domingo" not in x, "Manh√£" in x, x))
cols = st.columns(len(cols_to_display))
datas_selecionadas_atuais = []

for i, dia_turno in enumerate(cols_to_display):
    datas = opcoes_agrupadas[dia_turno]
    with cols[i]:
        st.write(f"**{dia_turno}**")
        for data_opcao_str in datas:
            # Formato completo para compara√ß√£o com o salvo
            full_option_str = f"{data_opcao_str} - {dia_turno}" 
            
            # Define o estado inicial do checkbox baseado nas op√ß√µes salvas
            is_checked = full_option_str in datas_restricao_salvas
            
            # O checkbox √© desabilitado se a edi√ß√£o n√£o estiver liberada
            if st.checkbox(data_opcao_str, key=f"{dia_turno}-{data_opcao_str}", value=is_checked, disabled=not edicao_liberada):
                datas_selecionadas_atuais.append(full_option_str)

# Define o valor padr√£o do radio button com base no que foi salvo
ceia_passada_radio_value = st.radio(
    "Voc√™ serviu na Ceia do m√™s passado?",
    ["N√£o", "Sim"],
    index=0 if serviu_ceia_salvo == "N√£o" else 1, # Define o √≠ndice baseado no valor salvo
    disabled=not edicao_liberada
)

voluntario_id = voluntario.get("id")
if not voluntario_id:
    st.error("Erro: ID do volunt√°rio n√£o encontrado.")
    conn.close() # Garante que a conex√£o seja fechada em caso de erro cr√≠tico
    st.stop()

if st.button("Enviar Indisponibilidade", type="primary", disabled=not edicao_liberada):
    datas_restricao_final = ", ".join(datas_selecionadas_atuais)
    if db.salvar_indisponibilidade(conn, voluntario_id, datas_restricao_final, ceia_passada_radio_value, mes_ref):
        st.success("Sua indisponibilidade foi registrada/atualizada com sucesso!")
        # Atualiza o estado da sess√£o para refletir as mudan√ßas imediatamente
        st.session_state.indisponibilidade_enviada = True # Pode usar para for√ßar um re-render se necess√°rio
        st.rerun() # Recarrega a p√°gina para mostrar as op√ß√µes atualizadas e o status
    else:
        st.error("Ocorreu um erro ao registrar/atualizar sua indisponibilidade.")


if st.sidebar.button("Logout"):
    for key in st.session_state.keys():
        del st.session_state[key]
    conn.close()
    st.switch_page("app.py")

conn.close() # Garante que a conex√£o seja fechada ao final da execu√ß√£o do script