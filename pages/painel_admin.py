# pages/painel_admin.py
import streamlit as st
import pandas as pd
import sqlite3
import database as db
import utils

# --- Configura√ß√£o da P√°gina e Verifica√ß√£o de Login ---
st.set_page_config(page_title="Painel Admin", layout="wide")

if not st.session_state.get('logged_in') or st.session_state.user_role != 'admin':
    st.error("Acesso restrito a administradores.")
    st.page_link("app.py", label="Ir para Login")
    st.stop()

# --- Conex√£o com o Banco ---
conn = db.conectar_db()
st.title("Painel de Administra√ß√£o")

# --- Abas para Organiza√ß√£o ---
# Adicionamos uma nova aba para as configura√ß√µes de escala
tab_gerenciar, tab_adicionar, tab_config_escala = st.tabs(["Gerenciar Volunt√°rios", "Adicionar Novo Volunt√°rio", "Configura√ß√µes de Escala"])

# --- Aba de Gerenciamento (Edi√ß√£o e Exclus√£o) ---
with tab_gerenciar:
    st.subheader("üìã Lista de Volunt√°rios Cadastrados")

    try:
        # Carrega a lista de volunt√°rios para exibi√ß√£o
        df_voluntarios = db.listar_voluntarios(conn)
        
        if df_voluntarios.empty:
            st.info("Nenhum volunt√°rio cadastrado ainda.")
        else:
            # Exibe a lista
            st.dataframe(df_voluntarios, use_container_width=True)
            st.markdown("---")

            # --- Se√ß√£o de A√ß√µes: Selecionar para Editar/Excluir ---
            st.subheader("A√ß√µes para um Volunt√°rio Espec√≠fico")

            # Busca todos os dados (incluindo senha) para popular o formul√°rio de edi√ß√£o
            # Usamos db.get_voluntario_by_id em vez de carregar tudo com pd.read_sql_query
            # para ser mais eficiente e lidar com o Row object
            
            # Primeiro, obtenha todos os IDs e nomes para o selectbox
            all_voluntarios_data = db.listar_voluntarios(conn)
            if not all_voluntarios_data.empty:
                id_selecionado = st.selectbox(
                    "Selecione o volunt√°rio:",
                    options=all_voluntarios_data['id'],
                    # Mostra o nome e o ID para facilitar a sele√ß√£o
                    format_func=lambda id: f"{all_voluntarios_data.loc[all_voluntarios_data['id'] == id, 'nome'].iloc[0]}",
                    key="selectbox_voluntario"
                )

                # Pega todos os dados do volunt√°rio que foi selecionado usando a nova fun√ß√£o
                voluntario_selecionado_row = db.get_voluntario_by_id(conn, id_selecionado)
                
                if voluntario_selecionado_row:
                    # Converte o Row object para um dicion√°rio para facilitar o acesso
                    voluntario_selecionado = dict(voluntario_selecionado_row)

                    # --- Formul√°rio de Edi√ß√£o ---
                    with st.form("form_editar_voluntario"):
                        st.write(f"**Editando:** {voluntario_selecionado['nome']}")
                        
                        nome = st.text_input("Nome", value=voluntario_selecionado["nome"])
                        usuario = st.text_input("Usu√°rio", value=voluntario_selecionado["usuario"])
                        nova_senha = st.text_input("Nova Senha", type="password", placeholder="Deixe em branco para n√£o alterar")

                        atribuicoes_default = [a.strip() for a in (voluntario_selecionado.get("atribuicoes") or "").split(",") if a.strip()]
                        atribuicoes = st.multiselect("Atribui√ß√µes", options=utils.ATRIBUICOES_LISTA, default=atribuicoes_default)
                        
                        disponibilidade_default = [d.strip() for d in (voluntario_selecionado.get("disponibilidade") or "").split(",") if d.strip()]
                        disponibilidade = st.multiselect("Disponibilidade", options=utils.DISPONIBILIDADE_OPCOES, default=disponibilidade_default)

                        if st.form_submit_button("Salvar Altera√ß√µes", type="primary"):
                            senha_final = nova_senha if nova_senha else voluntario_selecionado['senha']
                            atribuicoes_str = ", ".join(atribuicoes)
                            disponibilidade_str = ", ".join(disponibilidade)

                            db.editar_voluntario(conn, id_selecionado, nome, usuario, senha_final, atribuicoes_str, disponibilidade_str)
                            st.success(f"Dados do volunt√°rio '{nome}' atualizados com sucesso!")
                            st.rerun()
                else:
                    st.warning("Volunt√°rio selecionado n√£o encontrado.")
            else:
                st.info("Nenhum volunt√°rio para selecionar para edi√ß√£o/exclus√£o.")

            st.markdown("---")
            
            # --- Se√ß√£o de Exclus√£o ---
            if not all_voluntarios_data.empty and voluntario_selecionado_row: # Garante que h√° um volunt√°rio selecionado
                st.write(f"**Excluir:** {voluntario_selecionado['nome']}")
                st.warning(f"Aten√ß√£o: Esta a√ß√£o √© permanente e n√£o pode ser desfeita.")

                if st.button(f"Confirmar Exclus√£o do Volunt√°rio", type="secondary"):
                    db.excluir_voluntario(conn, id_selecionado)
                    st.success(f"Volunt√°rio '{voluntario_selecionado['nome']}' exclu√≠do. A lista ser√° atualizada.")
                    st.rerun()

    except Exception as e:
        st.error(f"Ocorreu um erro inesperado: {e}")


# --- Aba de Adicionar Volunt√°rio (sem altera√ß√µes) ---
with tab_adicionar:
    st.subheader("‚ûï Adicionar Novo Volunt√°rio")
    with st.form("cadastro_voluntario", clear_on_submit=True):
        nome = st.text_input("Nome Completo")
        usuario = st.text_input("Nome de Usu√°rio")
        senha = st.text_input("Senha Provis√≥ria", type="password")
        atribuicoes = st.multiselect("Atribui√ß√µes do Volunt√°rio", options=utils.ATRIBUICOES_LISTA)
        disponibilidade = st.multiselect("Disponibilidade Geral", options=utils.DISPONIBILIDADE_OPCOES)

        if st.form_submit_button("Cadastrar Volunt√°rio", type="primary"):
            if nome and usuario and senha:
                try:
                    db.adicionar_voluntario(conn, nome, usuario, senha, ", ".join(atribuicoes), ", ".join(disponibilidade))
                    st.success(f"Volunt√°rio '{nome}' com usu√°rio '{usuario}' cadastrado com sucesso!")
                except sqlite3.IntegrityError:
                    st.error(f"O nome de usu√°rio '{usuario}' j√° existe. Por favor, escolha outro.")
                except Exception as e:
                    st.error(f"Ocorreu um erro: {e}")
            else:
                st.error("Nome, Usu√°rio e Senha Provis√≥ria s√£o campos obrigat√≥rios.")

# --- NOVA ABA: Configura√ß√µes de Escala ---
with tab_config_escala:
    st.subheader("‚öôÔ∏è Configura√ß√µes de Edi√ß√£o de Escala")

    # Obt√©m o m√™s de refer√™ncia atual (pr√≥ximo m√™s)
    _, mes_ref_proximo_mes = utils.get_dias_culto_proximo_mes()

    # Carrega o status atual de edi√ß√£o para o pr√≥ximo m√™s
    edicao_liberada_atual = db.get_edicao_liberada(conn, mes_ref_proximo_mes)

    st.write(f"**Status de Edi√ß√£o para {mes_ref_proximo_mes}:**")
    status_display = "LIBERADA" if edicao_liberada_atual else "BLOQUEADA"
    st.info(f"Atualmente a edi√ß√£o de indisponibilidade est√° **{status_display}**.")

    nova_situacao = st.radio(
        "Deseja liberar ou bloquear as edi√ß√µes para este m√™s?",
        ["Liberar Edi√ß√£o", "Bloquear Edi√ß√£o"],
        index=0 if edicao_liberada_atual else 1 # Define a op√ß√£o inicial baseada no status atual
    )

    if st.button("Salvar Configura√ß√£o", type="primary", key="btn_salvar_config_escala"):
        status_to_save = (nova_situacao == "Liberar Edi√ß√£o")
        if db.set_edicao_liberada(conn, mes_ref_proximo_mes, status_to_save):
            st.success(f"Status de edi√ß√£o para {mes_ref_proximo_mes} atualizado para **{nova_situacao.upper()}**.")
            st.rerun()
        else:
            st.error("Erro ao atualizar o status de edi√ß√£o.")

    st.markdown("---")
    st.subheader("üìã Resumo das Indisponibilidades Enviadas")

    st.info("Aqui voc√™ pode ver as indisponibilidades informadas pelos volunt√°rios.")

    # Selecionar o m√™s para visualizar
    meses_configurados_rows = db.get_all_meses_configurados(conn)
    meses_disponiveis = [m['mes_referencia'] for m in meses_configurados_rows] # Acessa pelo nome da coluna

    if meses_disponiveis:
        mes_selecionado = st.selectbox(
            "Selecione o m√™s para visualizar as indisponibilidades:",
            options=meses_disponiveis,
            index=meses_disponiveis.index(mes_ref_proximo_mes) if mes_ref_proximo_mes in meses_disponiveis else 0,
            key="select_mes_indisponibilidade" # Chave √∫nica para o selectbox
        )

        if mes_selecionado:
            voluntarios_indisponibilidade_rows = db.get_all_voluntarios_indisponibilidade_for_month(conn, mes_selecionado)

            if voluntarios_indisponibilidade_rows:
                st.write(f"**Indisponibilidades para {mes_selecionado}:**")
                # Converte a lista de Row objects para um DataFrame para exibi√ß√£o mais bonita
                df_indisponibilidades = pd.DataFrame([dict(row) for row in voluntarios_indisponibilidade_rows])
                # Renomeia as colunas para melhor visualiza√ß√£o
                df_indisponibilidades.columns = ['Volunt√°rio', 'Datas de Restri√ß√£o', 'Serviu Ceia M√™s Passado']
                st.dataframe(df_indisponibilidades, use_container_width=True)
            else:
                st.info(f"Nenhum volunt√°rio informou indisponibilidade para {mes_selecionado} ainda.")
    else:
        st.info("Nenhum m√™s de escala configurado ainda.")


# --- Bot√£o de Logout na Barra Lateral ---
if st.sidebar.button("Logout"):
    for key in st.session_state.keys():
        del st.session_state[key]
    conn.close()
    st.switch_page("app.py")

conn.close() # Garante que a conex√£o seja fechada ao final