# utils.py
import streamlit as st
from collections import defaultdict
import locale
from datetime import datetime
from dateutil.relativedelta import relativedelta
import calendar
import bcrypt
import io
import pandas as pd
from weasyprint import HTML, CSS

# --- CONSTANTES DA APLICA√á√ÉO ---
ATRIBUICOES_LISTA = [
    "Lider da escala", "Recep√ß√£o", "Auxiliar", "Baby Historia",
    "Primario/Juvenil", "Inclus√£o", "Baby Auxiliar",    
]

DISPONIBILIDADE_OPCOES = ["Domingo Manh√£", "Domingo Noite", "Quinta-feira"]

# --- FUN√á√ÉO DE RENDERIZA√á√ÉO DA SIDEBAR ---
def render_sidebar():
    # A sidebar s√≥ aparece para admins
    if st.session_state.get('user_role') != 'admin':
        return # N√£o faz nada se n√£o for admin

    with st.sidebar:
        st.title("Minist√©rio Kids")
        st.markdown("---")
        
        nome_usuario = st.session_state.get('voluntario_info', {}).get('nome', 'Admin')
        st.write(f"Bem-vindo(a), **{nome_usuario}**!")
        
        st.header("Menu do Administrador")
        if st.button("Administra√ß√£o", use_container_width=True, type="primary" if st.session_state.get('page') == "painel_admin" else "secondary"):
            st.session_state.page = "painel_admin"; st.rerun()
        if st.button("Gerar e Editar Escala", use_container_width=True, type="primary" if st.session_state.get('page') == "gerar_escala" else "secondary"):
            st.session_state.page = "gerar_escala"; st.rerun()
        if st.button("Ver Coment√°rios", use_container_width=True, type="primary" if st.session_state.get('page') == "comentarios" else "secondary"):
            st.session_state.page = "comentarios"; st.rerun()
        if st.button("Solicita√ß√µes de Troca", use_container_width=True, type="primary" if st.session_state.get('page') == "solicitacoes_troca" else "secondary"):
            st.session_state.page = "solicitacoes_troca"; st.rerun()
        
        # Bot√£o de Alterar Senha espec√≠fico para o admin
        if st.button("Alterar Senha", use_container_width=True, type="primary" if st.session_state.get('page') == "alterar_senha" else "secondary"):
            st.session_state.page = "alterar_senha"; st.rerun()

        st.markdown("---")
        if st.button("üö™ Sair (Logout)", use_container_width=True):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.session_state.page = 'login'
            st.rerun()

        #     st.markdown("---")
        #     if user_role == 'admin':
        #         with st.expander("Modo Avan√ßado"):
        #             st.toggle("Habilitar Ferramentas de Desenvolvedor", key="dev_mode")
        #         st.markdown("---")
        #     if st.button("Logout", use_container_width=True):
        #         for key in ['logged_in', 'user_role', 'voluntario_info', 'dev_mode']:
        #             if key in st.session_state: del st.session_state[key]
        #         st.session_state.page = "login"; st.rerun()
        # else:
        #     st.info("Fa√ßa o login para acessar o sistema.")

# --- FUN√á√ïES DE DATA E LOCALIDADE ---
def configurar_localidade():
    try: locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')
    except locale.Error:
        try: locale.setlocale(locale.LC_TIME, 'Portuguese_Brazil')
        except locale.Error: print("Localidade pt_BR n√£o encontrada.")

def get_dias_culto_proximo_mes(disponibilidade_geral_voluntario: list = None):
    configurar_localidade()
    if disponibilidade_geral_voluntario is None:
        disponibilidade_geral_voluntario = DISPONIBILIDADE_OPCOES
    hoje = datetime.now()
    proximo_mes_data = hoje + relativedelta(months=1)
    ano, mes = proximo_mes_data.year, proximo_mes_data.month
    nome_mes_ref = proximo_mes_data.strftime("%B").capitalize()
    opcoes_agrupadas = defaultdict(list)
    num_dias = calendar.monthrange(ano, mes)[1]
    for dia in range(1, num_dias + 1):
        data_atual = datetime(ano, mes, dia)
        dia_formatado = data_atual.strftime('%d/%m')
        dia_da_semana = data_atual.weekday()
        if dia_da_semana == 3 and "Quinta-feira" in disponibilidade_geral_voluntario:
            opcoes_agrupadas["Quinta-feira"].append(dia_formatado)
        elif dia_da_semana == 6:
            if "Domingo Manh√£" in disponibilidade_geral_voluntario:
                opcoes_agrupadas["Domingo Manh√£"].append(dia_formatado)
            if "Domingo Noite" in disponibilidade_geral_voluntario:
                opcoes_agrupadas["Domingo Noite"].append(dia_formatado)
    return dict(opcoes_agrupadas), f"{nome_mes_ref} de {ano}"

# --- FUN√á√ïES DE SEGURAN√áA (SENHAS) ---
def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def check_password(password, hashed_password):
    try: return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))
    except (ValueError, TypeError): return False

# --- NOVA E FINAL FUN√á√ÉO DE GERA√á√ÉO DE PDF ---
def gerar_pdf_escala(dados_agrupados: dict, mes_referencia: str):
    """
    Gera um PDF da escala em 3 colunas, formato retrato, usando HTML e WeasyPrint.
    """
    
    # Extrai somente o "M√äS / ANO"
    titulo_pdf = mes_referencia.replace(' de ', ' / ').upper()

    css_string = """
    @page { 
        size: 22cm 35cm; /* P√°gina em p√© (retrato) */
        margin: 0.75cm;
    }
    body { 
        font-family: Arial, sans-serif; 
        font-size: 7pt;
        color: #333;
    }
    .titulo_principal {
        text-align: center;
        font-size: 18pt;
        font-weight: bold;
        margin-bottom: 16px;
        margin-top: 0;
    }
    .container_colunas {
        display: flex;
        justify-content: space-between; /* Espa√ßamento entre as colunas */
        align-items: flex-start;
        gap: 2px; /* Espa√ßo entre as colunas */
    }
    .coluna {
        flex: 1; /* Faz as colunas terem a mesma largura */
        display: flex;
        flex-direction: column;
        gap: 8px; /* Espa√ßo entre os blocos de data */
    }
    .titulo_coluna {
        background-color: #333;
        color: white;
        text-align: center;
        padding: 4px;
        font-weight: bold;
        border-radius: 5px;
        font-size: 8pt;
    }
    .bloco_data {
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden; /* Garante que o conte√∫do n√£o saia das bordas arredondadas */
    }
    .data_cabecalho {
        background-color: #f2f2f2;
        text-align: center;
        padding: 4px;
        font-weight: bold;
    }
    .tabela_atribuicoes {
        width: 100%;
        border-collapse: collapse;
    }
    .tabela_atribuicoes td {
        padding: 4px 6px;
        border-top: 1px solid #eee; /* Linha sutil entre as atribui√ß√µes */
    }
    .tabela_atribuicoes .funcao {
        font-weight: bold;
        width: 40%; /* Ajusta a largura da coluna de fun√ß√£o */
    }
    """

    # Monta o HTML do corpo do PDF
    html_colunas = ""
    ordem_colunas = ["Domingo Manh√£", "Domingo Noite", "Quinta-feira"]

    for nome_coluna in ordem_colunas:
        html_colunas += '<div class="coluna">'
        html_colunas += f'<div class="titulo_coluna">{nome_coluna.upper()}</div>'
        
        # Verifica se existe dados para esta coluna
        if nome_coluna in dados_agrupados:
            # Ordena as datas para garantir que apare√ßam em ordem cronol√≥gica
            datas_ordenadas = sorted(dados_agrupados[nome_coluna].keys())

            for data in datas_ordenadas:
                html_colunas += '<div class="bloco_data">'
                html_colunas += f'<div class="data_cabecalho">{data}/{titulo_pdf.split(" / ")[1]}</div>'
                html_colunas += '<table class="tabela_atribuicoes">'
                
                # Pega a lista de atribui√ß√µes para a data
                atribuicoes = dados_agrupados[nome_coluna][data]
                for funcao, voluntario in atribuicoes:
                    html_colunas += f'<tr><td class="funcao">{funcao}</td><td>{voluntario}</td></tr>'
                
                html_colunas += '</table></div>'
        
        html_colunas += '</div>'


    # Monta o documento HTML final
    html_string = f"""
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <title>Escala {mes_referencia}</title>
        <style>{css_string}</style>
    </head>
    <body>
        <div class="titulo_principal">{titulo_pdf}</div>
        <div class="container_colunas">{html_colunas}</div>
    </body>
    </html>
    """

    return HTML(string=html_string).write_pdf()

#responsividade
# NOVA SIDEBAR - apenas para volunt√°rios no desktop
def render_volunteer_sidebar():
    """Cria a sidebar de navega√ß√£o para volunt√°rios, vis√≠vel apenas em desktop."""
    with st.sidebar:
        st.title(f"Ol√°, {st.session_state.voluntario_info['nome']}!")
        st.markdown("---")
        if st.button("Confirmar Disponibilidade", use_container_width=True):
            st.session_state.page = 'painel_voluntario'
            st.rerun()
        if st.button("Ver Minha Escala", use_container_width=True):
            st.session_state.page = 'minha_escala'
            st.rerun()
        if st.button("Alterar Senha", use_container_width=True):
            st.session_state.page = 'alterar_senha'
            st.rerun()
        st.markdown("---")
        if st.button("üö™ Sair (Logout)", use_container_width=True):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.session_state.page = 'login'
            st.rerun()

# NOVA BARRA DE NAVEGA√á√ÉO - apenas para volunt√°rios no celular
def render_mobile_nav():
    """Cria a barra de navega√ß√£o no rodap√©, vis√≠vel apenas em mobile."""
    st.markdown('<div class="mobile-nav">', unsafe_allow_html=True)
    cols = st.columns(4)
    with cols[0]:
        if st.button("üóìÔ∏è Disponibilidade", use_container_width=True, help="Confirmar Disponibilidade"):
            st.session_state.page = 'painel_voluntario'; st.rerun()
    with cols[1]:
        if st.button("üìÖ Escala", use_container_width=True, help="Ver Minha Escala"):
            st.session_state.page = 'minha_escala'; st.rerun()
    with cols[2]:
        if st.button("üîí Senha", use_container_width=True, help="Alterar Senha"):
            st.session_state.page = 'alterar_senha'; st.rerun()
    with cols[3]:
        if st.button("üö™ Sair", use_container_width=True, help="Logout"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.session_state.page = 'login'; st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)